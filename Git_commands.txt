Here I will save the commands learned

1. git switch - this swichs between branches 
2. git branch - shows the existing branches
3. git branch + name - creates new branch
4. git commint -m - it commits and write the comment in one go
5. git commit -a -m - it adds to commit and write the comment in one go
6. git commit -am - pretty much the same as "git commit -a -m"
    
    Note: for "git commit -a -m" to work the new file has to be added 
    first and then if a new change is made it will work

7. git commit --amend - will re-save the last commit with new changes if made
    
    Note: the file in which changes were made has to bee added again 
    with git add "name of file" then we can use git commit --amend 

8. git log - will log all commits
9. git log --oneline - will show all commits with notes in one line

10. git switch -c - it will create a new branch and switch all in one go
11. touch - it creates new files
    11.1 mkdir + [name] - will create new directories

12. rm + [file-name] - remove/delete files
    12.1    rm -r + [file-name] - remove/delete directory

13. git branch -d - will delete a branch but you don't have to be in that branch and it has to be fully merged
14. git branch -D - it will forece to delete the branch even if is not merged
15. git branch -m - will rename the branch you are in
16. git merge + branch name - it merges branch, but we must be in the receiving branch
17. git branch -v - it shows the branchs with the last commits notes
18. git diff - lists all changes that are NOT staged
19. git diff HEAD - lists all changes in the working tree since the las commit both staged and not staged
20. git diff --staged - will list the changes between the staging area and last commit

    Note: is to show what will be included in the commit which are alread added (staged)

21. git diff --cached - do the same as "git diff --staged"
22. git diff HEAD + [name of file] - will show all changes in just the file called
23. git diff --staged + [name of file] - same as git diff HEAD [name] but for staged files only
24. git diff branch1..branch2 - will show changes between branches

    Note: name of branches can also be separated by space and not only (..)

25. git diff commit1..commit2 - will show the changes between commits not matter what commit
26. git stash - saves uncommited changes tha we can come back later but remove them visually

    Note: now Git will let swtich branches without having to commit changes on a working branch

27. git stash pop - will remove them from stash and put them back in the working file in the branch it was previously stashed.
28. git stash apply - will apply changes stashed away without removing it from the stash

    Note: will be usefull when needed to apply same changes in multiple branchs

30. git stash list - view the different stashes 
31. git stash apply stash@{2} - will apply the stash with that index back to the stack list
32. git stash drop stash@{2} - will drop the stash with that index saved in the stack list 
33. git stash clear - will clear all the stack stashes in the list
34. git checkout + [commit-hash] - to go back to previous commits (Detached HEAD)

    Note: to return to present use git switch + [branch name]

35. git checkout HEAD~1 - will go to the previous commit (detach head)
36. git switch + (-) - will go back to whatever commit or branch I was on "git switch -"
37. git checkout HEAD + [file name] - will revert work not yet staged or commited back to the last commit

    Note: git chechout -- + [file name] do the same we can use (--) instead of HEAD

38. git restore + [file name] - will do the same as git checout HEAD + [file name], will revert changes to the last commit
39. git restore --source HEAD~1 + [file name] - will undo work to specific commit we point out with "HEAD~(number)"
40. git restore --staged + [file name] - this is to remove the files staged with "git add" 

    Note: it can unstage a single file or many, let's say we staged 2 files but really just want one to be included in the 
          next commit, so we can remove just one with the command git restore --staged + [single/many file names]

41. git reset + [commit-hash] - will reset the repo back to a specific commit. The commits are gone.

    Note: This is usefull in case you made commints on a cetain branch, but you actually meant to make them on a separate branch
    Note 2: This just undo commints but don't reset the changes made, changes will still be there, is usefull if you want to 
            keep that work and save the chages on another branch by making a commint

42. git reset --hard + [commit-hash] - it undo the commits and removes the changes made

43. git revert + [commit-hash] - delete the work and make a new commit, so you get rid of the changes but keep the record of them

    Note: so you don't delete the previous commit, it still exist but changes are gone and a new commit was made.

GitHub

44. git remote -v - Shows the name of the remote and the corresponding repository URL
45. git remote add [name] [URL] - To add a new remote we add a label and the URL
46. git remote rename [old name] [new name] - it renames the remote
47. git remote remove [name] - To get rib of a remote
48. git push + [remote name] + [branch name] - it will send and update this branch onto the repo on GitHub

    Example: git push origin master  or   git push origin branch3

49. git push origin master:branch3 - This will push the master branch to the branch3 on the cloud

    Note: if we use colon (:) we tell git which brach we want to push onto a different branch in GitHub, first name is the local
          branch and second name after the colon is the branch we are pushing to.

50. git push -u origin master - it sets the upstream of the local master branch if I'm on the local 
                                master (it connets the branch I'm on to the one we want on GitHub)

    Note: it connets the local branch to the origin master (master on GitHub) so we could type just git push and it will uploal
          directly the local master to the master or main on GitHub automatically without having to specify it.

51. git push -u local:GitHub - Here we connect set the upstream from an specific branch to a specific (different) branch on GitHub
52. git branch -M main - This upper -M will rename the branch we are on, it to be in concordance with GitHub to set mastor to main
53. git branch -r - it shows the branchs the remote repository knows about from all existing branches in the local repo
54. git checkout origin/main - will detach head and go back to the last commit the remote repo knows about

    --Note: When we clone a new repository we only have as workspace the main branch, but we cam have a copy of the other branches
            in our local machine and set it up to track the remote branch.  Below is how.

55. git switch [remore-branch-name] - it creates a new local branch from the remote branch of the same name, makes me a local branch
                                      and set it up to track the remote origin/[branch-name]

56. git fetch [remote] [branch] - command fetches branches and history from an specific remote repository, it only updates remote 
                                  tracking branches, Ex. "git fetch origin main"

    Note: Think of it as "please got and get the latest from Github, but don't screw up my working directory

55. git fetch origin - will fetch all changes from the origin remote repository.
56. git checkout origin/[branch-name] - it allows us to see changes made and pushed from other colaborators on this branch 
                                        through a detached head
57. git pull [remote] [branch] - will retrieve changes from remote repo and update our HEAD branch, its like "git fetch + git merge"

    Note: Changes will be merged on the branch we run it from, if we run it from master changes will be made to master branch
    Note 2: As a good practice before PUSH any change first PULL, fix any conflict that might exist and the you can PUSH changes
    Note 3: We can use simple "git pull" Ex. if we are in the main branch it is normally tracking origin/main already 

58. Fork a public project/repo - We fork a repo to create our own repo on Github so we make any changes and try them out

    Work Flow to colaborate on open source projects: 
    1. Fork the repo
    2. Clone down to our local machine the fork version - This automatically sets up a remote origin to the Fork version
    3. Set a second remote named "upstream" to the original repo that was forked so we can pull new possible changes done
    4. Make changes locally on our machine
    5. Push changes to the Fork version 
    6. Create to pull request "PR" from the Fork on the cloud to the original Repo to be able to colaborate to the original project

BACK TO GIT COMMANDS 

59. git rebase [master branch] - This command merges the commits in a way it rewrites history, it puts the commits made on the feature
                                 branch on the top leaving all commits made on the master before, it just reordered the commits

    Note 1: Only rebase on FEATRUE branches, NEVER on master branch
    Note 2: Never rebase commits that have been shared with others, if you push commits up to Github DO NOT rebase
    Note 3. When there is conflicts between files, it can be fix just like a regular merge 

60. git rebase --abort - This is to abort and get back to the state before 

    Note: if conflicts were fixed and you do want to continue with rebase you can just "git add [name of files fixed]"
          and then use "git rebase --continue"

61. git rebase --continue - This is to continue the rebase command once all conflicts have been resolved

    Note: First fix the conflicts, then add them to stage them and instead of using "git commit" use "git rebase --continue"

62. git rebase -i HEAD~4 - Allows to edit commits, add files, drop commits

    Note 1: it needs to specify how far back we want to rewrite commits with "HEAD~(number)"
    Note 2: We don't rebase onto another branch, we rebase a series of commits onto the HEAD we currently are (in place)

        COMMAND OPTIONS OF WHAT TO DO WITH EACH COMMIT

        pick - use the commit
        reword - use the commit but edit the commit message
        edit - use the commit, but stop for amending
        fixup - use commit contents but meld it into previous commit and discard the commit message
        drop - remove commit

63. git tag - Prints a list of all tags in the current repository
64. git tal -l "*beta*" - This can search for tags match a particular pattern passing in a wildcard 

    Note: "*beta*" was used as example and will print a list of tags that incluse "beta" in their name

65. git checkout [tag] - To view the state of a repo at a particular tag (this takes us to a detached HEAD)

    Note: Example git checkout 15.0.1

66. git diff [tag1] [tag2] - This is to compare the difference between 2 tags (2 versions of the code) 

    Note: it can also be done as follows git diff [ta1]..[tag2] (separated by 2 dots)

67. git tag [give tag name] - Creates a new tag, Ex. git tag v17.0.1 (this is a lightweight tag) and creates the tag at HEAD point.
68. git tag -a [give name] - This sets an annotedated tag which helps to set tags with more notes and details
69. git show [name of tag] - To check the notes make on the annotated tag, the date and who made it.
70. git tag [give tag name] [commit hash] - This adds a tag to previous commits, we set a tag name and provide the commit hash

    Note: It can also be done with annotated tags Ex. "git tag -a [give tag name] [commit hash]"

71. git tag -f [tag name] [commit hash] - It forces to move the tag to a different commit, it's helpfull if we made a mistake
72. git tag -d [tag name] - It deletes a tag we no longer want or need
73. git push origin --tags - When we push a repo to Github it doesn't push the tags automatically, so we need to push them manually

    REFLOGS

        Git keeps a record of when the tips of branches and other reference where updated in the repo. We can view and 
        update the reference logs using the "git reflog" command

74 git reflog show [HEAD] - Will show the log of a specific reference (it defaults to HEAD)

    Ex. To view the logs for the tip of the main branch we could run "git reflog show main"

75. git reflog show HEAD@{number} - To access specific ref pointers. Ex. "git reflog show HEAD@{2}" This is like saying 
                                   where HEAD was 2 moves ago, and can pass them to other commands like checkout, reset and merge

    Note: git checkout HEAD~2 - is detached head and goes 2 commits ago  
          git checkout HEAD@{2} - it to see 2 moves ago in the reflog (it could be anything, is just to see where head was 
                                  at 2 moves ago)

76. git reflog main@{one.week.ago} - Shows everything in main branch up until one week ago
77. git checkout main@{2.days.ago} - Take us to one week ago in main branch
78. git diff main@{0} main@{yesterday} - Shows difference between these 2 timestamps
79. git reflog show HEAD@{2.days.ago} - Shows all up until 2 days ago

    RESTORE LOST WORK / COMMITS

    If we hard resert (reset --hard) we deleted the commit and its content, we can always use reflogs to access to the 
    history of the commits for Ex. "git reflog show master" which shows all history on master, then we can take and use the 
    commit hash or the reflog (Ex. master@{2}) to restore it by making another "reset --hard + [commit hash / reflog ref]

80. git reset --hard master@{2} which is a pointer OR git reset --hard + [hash number] we got from reflog history

    GIT ALIEASES

    We can set up Git aliases to custome commands, Ex. instead of "git commit" we could have "git ci" but could be anything

81. git config --global alias.[name to be set] + [current git command name]

    Ex. git config --global alias.bcs branch - it will set the alias "bcs" for "branch" 
    and will able to use git bcs to check the existing branchs

82. echo $HOME/.gitconfig - This is to find the path to the global "gitconfig" file  
82. code ~/.gitconfig - once we are on the HOME we can type this to open the global gitconfig file to set globla aliases

    Note: In the file we need to set a section called "[alias]" and under this we can set the alias up

    Ex. [alias]
            cm = commit -am - This will save the alias to add and commit tha can be used instead of typing git commit -am + message

            Note: Now we could use "git cm + [commit message]" instead of "git commit -am + [commit message]"







