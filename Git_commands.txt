Here I will save the commands learn

1. git switch - this swichs between branches 
2. git branch - shows the existing branches
3. git branch + name - creates new branch
4. git commint -m - it commits and write the comment in one go
5. git commit -a -m - it adds to commit and write the comment in one go
6. git commit -am - pretty much the same as "git commit -a -m"
    
    Note: for "git commit -a -m" to work the new file has to be added 
    first and then if a new change is made it will work

7. git commit --amend - will re-save the last commit with new changes if made
    
    Note: the file in which changes were made has to bee added again 
    with git add "name of file" then we can use git commit --amend 

8. git log - will log all commits
9. git log --oneline - will show all commits with notes in one line

10. git switch -c - it will create a new branch and switch all in one go
11. touch - it creates new files
12. mkdit - will create new directories
13. git branch -d - will delete a branch but you don't have to be in that branch and it has to be fully merged
14. git branch -D - it will forece to delete the branch even if is not merged
15. git branch -m - will rename the branch you are in
16. git merge + branch name - it merges branch, but we must be in the receiving branch
17. git branch -v - it shows the branchs with the last commits notes
18. git diff - lists all changes that are NOT staged
19. git diff HEAD - lists all changes in the working tree since the las commit both staged and not staged
20. git diff --staged - will list the changes between the staging area and last commit

    Note: is to show what will be included in the commit which are alread added (staged)

21. git diff --cached - do the same as "git diff --staged"
22. git diff HEAD + [name of file] - will show all changes in just the file called
23. git diff --staged + [name of file] - same as git diff HEAD [name] but for staged files only
24. git diff branch1..branch2 - will show changes between branches

    Note: name of branches can also be separated by space and not only (..)

25. git diff commit1..commit2 - will show the changes between commits not matter what commit
26. git stash - saves uncommited changes tha we can come back later but remove them visually

    Note: now Git will let swtich branches without having to commit changes on a working branch

27. git stash pop - will remove them from stash and put them back in the working file in the branch it was previously stashed.
28. git stash apply - will apply changes stashed away without removing it from the stash

    Note: will be usefull when needed to apply same changes in multiple branchs

30. git stash list - view the different stashes 
31. git stash apply stash@{2} - will apply the stash with that index back to the stack list
32. git stash drop stash@{2} - will drop the stash with that index saved in the stack list 
33. git stash clear - will clear all the stack stashes in the list
34. git checkout + [commit-hash] - to go back to previous commits 

    Note: to return to present use git switch + [branch name]

35. git checkout HEAD~1 - will go to the previous commit
36. git switch + (-) - will go back to whatever commit or branch I was on "git switch -"
