Here I will save the commands learn

1. git switch - this swichs between branches 
2. git branch - shows the existing branches
3. git branch + name - creates new branch
4. git commint -m - it commits and write the comment in one go
5. git commit -a -m - it adds to commit and write the comment in one go
6. git commit -am - pretty much the same as "git commit -a -m"
    
    Note: for "git commit -a -m" to work the new file has to be added 
    first and then if a new change is made it will work

7. git commit --amend - will re-save the last commit with new changes if made
    
    Note: the file in which changes were made has to bee added again 
    with git add "name of file" then we can use git commit --amend 

8. git log - will log all commits
9. git log --oneline - will show all commits with notes in one line

10. git switch -c - it will create a new branch and switch all in one go
11. touch - it creates new files
    11.1 mkdir + [name] - will create new directories

12. rm + [file-name] - remove/delete files
    12.1    rm -r + [file-name] - remove/delete directory

13. git branch -d - will delete a branch but you don't have to be in that branch and it has to be fully merged
14. git branch -D - it will forece to delete the branch even if is not merged
15. git branch -m - will rename the branch you are in
16. git merge + branch name - it merges branch, but we must be in the receiving branch
17. git branch -v - it shows the branchs with the last commits notes
18. git diff - lists all changes that are NOT staged
19. git diff HEAD - lists all changes in the working tree since the las commit both staged and not staged
20. git diff --staged - will list the changes between the staging area and last commit

    Note: is to show what will be included in the commit which are alread added (staged)

21. git diff --cached - do the same as "git diff --staged"
22. git diff HEAD + [name of file] - will show all changes in just the file called
23. git diff --staged + [name of file] - same as git diff HEAD [name] but for staged files only
24. git diff branch1..branch2 - will show changes between branches

    Note: name of branches can also be separated by space and not only (..)

25. git diff commit1..commit2 - will show the changes between commits not matter what commit
26. git stash - saves uncommited changes tha we can come back later but remove them visually

    Note: now Git will let swtich branches without having to commit changes on a working branch

27. git stash pop - will remove them from stash and put them back in the working file in the branch it was previously stashed.
28. git stash apply - will apply changes stashed away without removing it from the stash

    Note: will be usefull when needed to apply same changes in multiple branchs

30. git stash list - view the different stashes 
31. git stash apply stash@{2} - will apply the stash with that index back to the stack list
32. git stash drop stash@{2} - will drop the stash with that index saved in the stack list 
33. git stash clear - will clear all the stack stashes in the list
34. git checkout + [commit-hash] - to go back to previous commits 

    Note: to return to present use git switch + [branch name]

35. git checkout HEAD~1 - will go to the previous commit
36. git switch + (-) - will go back to whatever commit or branch I was on "git switch -"
37. git checkout HEAD + [file name] - will revert work not yet staged or commited back to the last commit

    Note: git chechout -- + [file name] do the same we can use (--) instead of HEAD

38. git restore + [file name] - will do the same as git checout HEAD + [file name], will revert changes to the last commit
39. git restore --source HEAD~1 + [file name] - will undo work to specific commit we point out with "HEAD~(number)"
40. git restore --staged + [file name] - this is to remove the files staged with "git add" 

    Note: it can unstage a single file or many, let's say we staged 2 files but really just want one to be included in the 
          next commit, so we can remove just one with the command git restore --staged + [single/many file names]

41. git reset + [commit-hash] - will reset the repo back to a specific commit. The commits are gone.

    Note: This is usefull in case you made commints on a cetain branch, but you actually meant to make them on a separate branch
    Note 2: This just undo commints but don't reset the changes made, changes will still be there, is usefull if you want to 
            keep that work and save the chages on another branch by making a commint

42. git reset --hard + [commit-hash] - it undo the commits and removes the changes made

43. git revert + [commit-hash] - delete the work and make a new commit, so you get rid of the changes but keep the record of them

    Note: so you don't delete the previous commit, it still exist but changes are gone and a new commit was made.

GitHub

44. git remote -v - Shows the name of the remote and the corresponding repository URL
45. git remote add [name] [URL] - To add a new remote we add a label and the URL
46. git remote rename [old name] [new name] - it renames the remote
47. git remote remove [name] - To get rib of a remote
48. git push + [remote name] + [branch name] - it will send and update this branch onto the repo on GitHub

    Example: git push origin master  or   git push origin branch3

49. git push origin master:branch3 - This will push the master branch to the branch3 on the cloud

    Note: if we use colon (:) we tell git which brach we want to push onto a different branch in GitHub, first name is the local
          branch and second name after the colon is the branch we are pushing to.

50. git push -u origin master - it sets the upstream of the local master branch if I'm on the local 
                                master (it connets the branch I'm on to the one we want on GitHub)

    Note: it connets the local branch to the origin master (master on GitHub) so we could type just git push and it will uploal
          directly the local master to the master or main on GitHub automatically without having to specify it.

51. git push -u local:GitHub - Here we connect set the upstream from an specific branch to a specific (different) branch on GitHub
52. git branch -M main - This upper -M will rename the branch we are on, it to be in concordance with GitHub to set mastor to main






